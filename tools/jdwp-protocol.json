{"command_sets":[{"name":"VirtualMachine","id":1,"commands":[{"name":"Version","id":1,"outputs":[],"replies":[{"type":"string","name":"description","doc":"Text information on the VM version"},{"type":"int","name":"jdwpMajor","doc":"Major JDWP Version number"},{"type":"int","name":"jdwpMinor","doc":"Minor JDWP Version number"},{"type":"string","name":"vmVersion","doc":"Target VM JRE version, as in the java.version property"},{"type":"string","name":"vmName","doc":"Target VM name, as in the java.vm.name property"}],"errors":["VM_DEAD"]},{"name":"ClassesBySignature","id":2,"outputs":[{"type":"string","name":"signature","doc":"JNI signature of the class to find (for example, \"Ljava/lang/String;\")."}],"replies":[{"type":"int","name":"classes","doc":"Number of reference types that follow.","repeated":[{"type":"byte","name":"refTypeTag","doc":" of following reference type."},{"type":"referenceTypeID","name":"typeID","doc":"Matching loaded reference type"},{"type":"int","name":"status","doc":"The current class "}]}],"errors":["VM_DEAD"]},{"name":"AllClasses","id":3,"outputs":[],"replies":[{"type":"int","name":"classes","doc":"Number of reference types that follow.","repeated":[{"type":"byte","name":"refTypeTag","doc":" of following reference type."},{"type":"referenceTypeID","name":"typeID","doc":"Loaded reference type"},{"type":"string","name":"signature","doc":"The JNI signature of the loaded reference type"},{"type":"int","name":"status","doc":"The current class "}]}],"errors":["VM_DEAD"]},{"name":"AllThreads","id":4,"outputs":[],"replies":[{"type":"int","name":"threads","doc":"Number of threads that follow.","repeated":[{"type":"threadID","name":"thread","doc":"A running thread"}]}],"errors":["VM_DEAD"]},{"name":"TopLevelThreadGroups","id":5,"outputs":[],"replies":[{"type":"int","name":"groups","doc":"Number of thread groups that follow.","repeated":[{"type":"threadGroupID","name":"group","doc":"A top level thread group"}]}],"errors":["VM_DEAD"]},{"name":"Dispose","id":6,"outputs":[],"replies":[],"errors":[]},{"name":"IDSizes","id":7,"outputs":[],"replies":[{"type":"int","name":"fieldIDSize","doc":"fieldID size in bytes"},{"type":"int","name":"methodIDSize","doc":"methodID size in bytes"},{"type":"int","name":"objectIDSize","doc":"objectID size in bytes"},{"type":"int","name":"referenceTypeIDSize","doc":"referenceTypeID size in bytes"},{"type":"int","name":"frameIDSize","doc":"frameID size in bytes"}],"errors":["VM_DEAD"]},{"name":"Suspend","id":8,"outputs":[],"replies":[],"errors":["VM_DEAD"]},{"name":"Resume","id":9,"outputs":[],"replies":[],"errors":[]},{"name":"Exit","id":10,"outputs":[{"type":"int","name":"exitCode","doc":"the exit code"}],"replies":[],"errors":[]},{"name":"CreateString","id":11,"outputs":[{"type":"string","name":"utf","doc":"UTF-8 characters to use in the created string."}],"replies":[{"type":"stringID","name":"stringObject","doc":"Created string (instance of java.lang.String)"}],"errors":["VM_DEAD"]},{"name":"Capabilities","id":12,"outputs":[],"replies":[{"type":"boolean","name":"canWatchFieldModification","doc":"Can the VM watch field modification, and therefore can it send the Modification Watchpoint Event?"},{"type":"boolean","name":"canWatchFieldAccess","doc":"Can the VM watch field access, and therefore can it send the Access Watchpoint Event?"},{"type":"boolean","name":"canGetBytecodes","doc":"Can the VM get the bytecodes of a given method?"},{"type":"boolean","name":"canGetSyntheticAttribute","doc":"Can the VM determine whether a field or method is synthetic? (that is, can the VM determine if the method or the field was invented by the compiler?)"},{"type":"boolean","name":"canGetOwnedMonitorInfo","doc":"Can the VM get the owned monitors infornation for a thread?"},{"type":"boolean","name":"canGetCurrentContendedMonitor","doc":"Can the VM get the current contended monitor of a thread?"},{"type":"boolean","name":"canGetMonitorInfo","doc":"Can the VM get the monitor information for a given object?"}],"errors":["VM_DEAD"]},{"name":"ClassPaths","id":13,"outputs":[],"replies":[{"type":"string","name":"baseDir","doc":"Base directory used to resolve relative paths in either of the following lists."},{"type":"int","name":"classpaths","doc":"Number of paths in classpath.","repeated":[{"type":"string","name":"path","doc":"One component of classpath"}]},{"type":"int","name":"bootclasspaths","doc":"Number of paths in bootclasspath.","repeated":[{"type":"string","name":"path","doc":"One component of bootclasspath"}]}],"errors":["VM_DEAD"]},{"name":"DisposeObjects","id":14,"outputs":[{"type":"int","name":"requests","doc":"Number of object dispose requests that follow","repeated":[{"type":"objectID","name":"object","doc":"The object ID"},{"type":"int","name":"refCnt","doc":"The number of times this object ID has been part of a packet received from the back-end. An accurate count prevents the object ID from being freed on the back-end if it is part of an incoming packet, not yet handled by the front-end."}]}],"replies":[],"errors":[]},{"name":"HoldEvents","id":15,"outputs":[],"replies":[],"errors":[]},{"name":"ReleaseEvents","id":16,"outputs":[],"replies":[],"errors":[]},{"name":"CapabilitiesNew","id":17,"outputs":[],"replies":[{"type":"boolean","name":"canWatchFieldModification","doc":"Can the VM watch field modification, and therefore can it send the Modification Watchpoint Event?"},{"type":"boolean","name":"canWatchFieldAccess","doc":"Can the VM watch field access, and therefore can it send the Access Watchpoint Event?"},{"type":"boolean","name":"canGetBytecodes","doc":"Can the VM get the bytecodes of a given method?"},{"type":"boolean","name":"canGetSyntheticAttribute","doc":"Can the VM determine whether a field or method is synthetic? (that is, can the VM determine if the method or the field was invented by the compiler?)"},{"type":"boolean","name":"canGetOwnedMonitorInfo","doc":"Can the VM get the owned monitors infornation for a thread?"},{"type":"boolean","name":"canGetCurrentContendedMonitor","doc":"Can the VM get the current contended monitor of a thread?"},{"type":"boolean","name":"canGetMonitorInfo","doc":"Can the VM get the monitor information for a given object?"},{"type":"boolean","name":"canRedefineClasses","doc":"Can the VM redefine classes?"},{"type":"boolean","name":"canAddMethod","doc":"Can the VM add methods when redefining classes?"},{"type":"boolean","name":"canUnrestrictedlyRedefineClasses","doc":"Can the VM redefine classesin arbitrary ways?"},{"type":"boolean","name":"canPopFrames","doc":"Can the VM pop stack frames?"},{"type":"boolean","name":"canUseInstanceFilters","doc":"Can the VM filter events by specific object?"},{"type":"boolean","name":"canGetSourceDebugExtension","doc":"Can the VM get the source debug extension?"},{"type":"boolean","name":"canRequestVMDeathEvent","doc":"Can the VM request VM death events?"},{"type":"boolean","name":"canSetDefaultStratum","doc":"Can the VM set a default stratum?"},{"type":"boolean","name":"canGetInstanceInfo","doc":"Can the VM return instances, counts of instances of classes and referring objects?"},{"type":"boolean","name":"canRequestMonitorEvents","doc":"Can the VM request monitor events?"},{"type":"boolean","name":"canGetMonitorFrameInfo","doc":"Can the VM get monitors with frame depth info?"},{"type":"boolean","name":"canUseSourceNameFilters","doc":"Can the VM filter class prepare events by source name?"},{"type":"boolean","name":"canGetConstantPool","doc":"Can the VM return the constant pool information?"},{"type":"boolean","name":"canForceEarlyReturn","doc":"Can the VM force early return from a method?"},{"type":"boolean","name":"reserved22","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved23","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved24","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved25","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved26","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved27","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved28","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved29","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved30","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved31","doc":"Reserved for future capability"},{"type":"boolean","name":"reserved32","doc":"Reserved for future capability"}],"errors":["VM_DEAD"]},{"name":"RedefineClasses","id":18,"outputs":[{"type":"int","name":"classes","doc":"Number of reference types that follow.","repeated":[{"type":"referenceTypeID","name":"refType","doc":"The reference type."},{"type":"int","name":"classfile","doc":"Number of bytes defining class (below)","repeated":[{"type":"byte","name":"classbyte","doc":"byte in JVM class file format."}]}]}],"replies":[],"errors":["INVALID_CLASS","INVALID_OBJECT","UNSUPPORTED_VERSION","INVALID_CLASS_FORMAT","CIRCULAR_CLASS_DEFINITION","FAILS_VERIFICATION","NAMES_DONT_MATCH","NOT_IMPLEMENTED","ADD_METHOD_NOT_IMPLEMENTED","SCHEMA_CHANGE_NOT_IMPLEMENTED","HIERARCHY_CHANGE_NOT_IMPLEMENTED","DELETE_METHOD_NOT_IMPLEMENTED","CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED","METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED","VM_DEAD"]},{"name":"SetDefaultStratum","id":19,"outputs":[{"type":"string","name":"stratumID","doc":"default stratum, or empty string to use reference type default."}],"replies":[],"errors":["NOT_IMPLEMENTED","VM_DEAD"]},{"name":"AllClassesWithGeneric","id":20,"outputs":[],"replies":[{"type":"int","name":"classes","doc":"Number of reference types that follow.","repeated":[{"type":"byte","name":"refTypeTag","doc":" of following reference type."},{"type":"referenceTypeID","name":"typeID","doc":"Loaded reference type"},{"type":"string","name":"signature","doc":"The JNI signature of the loaded reference type."},{"type":"string","name":"genericSignature","doc":"The generic signature of the loaded reference type or an empty string if there is none."},{"type":"int","name":"status","doc":"The current class "}]}],"errors":["VM_DEAD"]},{"name":"InstanceCounts","id":21,"outputs":[{"type":"int","name":"refTypesCount","doc":"Number of reference types that follow.    Must be non-negative.","repeated":[{"type":"referenceTypeID","name":"refType","doc":"A reference type ID."}]}],"replies":[{"type":"int","name":"counts","doc":"The number of counts that follow.","repeated":[{"type":"long","name":"instanceCount","doc":"The number of instances for the corresponding reference type in 'Out Data'."}]}],"errors":["ILLEGAL_ARGUMENT","NOT_IMPLEMENTED","VM_DEAD"]}]},{"name":"ReferenceType","id":2,"commands":[{"name":"Signature","id":1,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"string","name":"signature","doc":"The JNI signature for the reference type."}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"ClassLoader","id":2,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"classLoaderID","name":"classLoader","doc":"The class loader for the reference type."}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"Modifiers","id":3,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"modBits","doc":"Modifier bits as defined in Chapter 4 of <cite>The Java&trade; Virtual Machine Specification</cite>"}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"Fields","id":4,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"declared","doc":"Number of declared fields.","repeated":[{"type":"fieldID","name":"fieldID","doc":"Field ID."},{"type":"string","name":"name","doc":"Name of field."},{"type":"string","name":"signature","doc":"JNI Signature of field."},{"type":"int","name":"modBits","doc":"The modifier bit flags (also known as access flags) which provide additional information on the  field declaration. Individual flag values are defined in Chapter 4 of <cite>The Java&trade; Virtual Machine Specification</cite>. In addition, The <code>0xf0000000</code> bit identifies the field as synthetic, if the synthetic attribute  is available."}]}],"errors":["CLASS_NOT_PREPARED","INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"Methods","id":5,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"declared","doc":"Number of declared methods.","repeated":[{"type":"methodID","name":"methodID","doc":"Method ID."},{"type":"string","name":"name","doc":"Name of method."},{"type":"string","name":"signature","doc":"JNI signature of method."},{"type":"int","name":"modBits","doc":"The modifier bit flags (also known as access flags) which provide additional information on the  method declaration. Individual flag values are defined in Chapter 4 of <cite>The Java&trade; Virtual Machine Specification</cite>. In addition, The <code>0xf0000000</code> bit identifies the method as synthetic, if the synthetic attribute  is available."}]}],"errors":["CLASS_NOT_PREPARED","INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"GetValues","id":6,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."},{"type":"int","name":"fields","doc":"The number of values to get","repeated":[{"type":"fieldID","name":"fieldID","doc":"A field to get"}]}],"replies":[{"type":"int","name":"values","doc":"The number of values returned, always equal to fields, the number of values to get.","repeated":[{"type":"value","name":"value","doc":"The field value"}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_FIELDID","VM_DEAD"]},{"name":"SourceFile","id":7,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"string","name":"sourceFile","doc":"The source file name. No path information for the file is included"}],"errors":["INVALID_CLASS","INVALID_OBJECT","ABSENT_INFORMATION","VM_DEAD"]},{"name":"NestedTypes","id":8,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"classes","doc":"The number of nested classes and interfaces","repeated":[{"type":"byte","name":"refTypeTag","doc":" of following reference type."},{"type":"referenceTypeID","name":"typeID","doc":"The nested class or interface ID."}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"Status","id":9,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"status","doc":" bits:See "}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"Interfaces","id":10,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"interfaces","doc":"The number of implemented interfaces","repeated":[{"type":"interfaceID","name":"interfaceType","doc":"implemented interface."}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"ClassObject","id":11,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"classObjectID","name":"classObject","doc":"class object."}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"SourceDebugExtension","id":12,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"string","name":"extension","doc":"extension attribute"}],"errors":["INVALID_CLASS","INVALID_OBJECT","ABSENT_INFORMATION","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"SignatureWithGeneric","id":13,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"string","name":"signature","doc":"The JNI signature for the reference type."},{"type":"string","name":"genericSignature","doc":"The generic signature for the reference type or an empty string if there is none."}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"FieldsWithGeneric","id":14,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"declared","doc":"Number of declared fields.","repeated":[{"type":"fieldID","name":"fieldID","doc":"Field ID."},{"type":"string","name":"name","doc":"The name of the field."},{"type":"string","name":"signature","doc":"The JNI signature of the field."},{"type":"string","name":"genericSignature","doc":"The generic signature of the field, or an empty string if there is none."},{"type":"int","name":"modBits","doc":"The modifier bit flags (also known as access flags) which provide additional information on the  field declaration. Individual flag values are defined in Chapter 4 of <cite>The Java&trade; Virtual Machine Specification</cite>. In addition, The <code>0xf0000000</code> bit identifies the field as synthetic, if the synthetic attribute  is available."}]}],"errors":["CLASS_NOT_PREPARED","INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"MethodsWithGeneric","id":15,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."}],"replies":[{"type":"int","name":"declared","doc":"Number of declared methods.","repeated":[{"type":"methodID","name":"methodID","doc":"Method ID."},{"type":"string","name":"name","doc":"The name of the method."},{"type":"string","name":"signature","doc":"The JNI signature of the method."},{"type":"string","name":"genericSignature","doc":"The generic signature of the method, or an empty string if there is none."},{"type":"int","name":"modBits","doc":"The modifier bit flags (also known as access flags) which provide additional information on the  method declaration. Individual flag values are defined in Chapter 4 of <cite>The Java&trade; Virtual Machine Specification</cite>. In addition, The <code>0xf0000000</code> bit identifies the method as synthetic, if the synthetic attribute  is available."}]}],"errors":["CLASS_NOT_PREPARED","INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"Instances","id":16,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The reference type ID."},{"type":"int","name":"maxInstances","doc":"Maximum number of instances to return.  Must be non-negative. If zero, all instances are returned."}],"replies":[{"type":"int","name":"instances","doc":"The number of instances that follow.","repeated":[{"type":"tagged-objectID","name":"instance","doc":"An instance of this reference type."}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","ILLEGAL_ARGUMENT","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"ClassFileVersion","id":17,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The class."}],"replies":[{"type":"int","name":"majorVersion","doc":"Major version number"},{"type":"int","name":"minorVersion","doc":"Minor version number"}],"errors":["INVALID_CLASS","INVALID_OBJECT","ABSENT_INFORMATION","VM_DEAD"]},{"name":"ConstantPool","id":18,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The class."}],"replies":[{"type":"int","name":"count","doc":"Total number of constant pool entries plus one. This corresponds to the constant_pool_count item of the Class File Format in <cite>The Java&trade; Virtual Machine Specification</cite>."},{"type":"int","name":"bytes","doc":"","repeated":[{"type":"byte","name":"cpbytes","doc":"Raw bytes of constant pool"}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","NOT_IMPLEMENTED","ABSENT_INFORMATION","VM_DEAD"]}]},{"name":"ClassType","id":3,"commands":[{"name":"Superclass","id":1,"outputs":[{"type":"classID","name":"clazz","doc":"The class type ID."}],"replies":[{"type":"classID","name":"superclass","doc":"The superclass (null if the class ID for java.lang.Object is specified)."}],"errors":["INVALID_CLASS","INVALID_OBJECT","VM_DEAD"]},{"name":"SetValues","id":2,"outputs":[{"type":"classID","name":"clazz","doc":"The class type ID."},{"type":"int","name":"values","doc":"The number of fields to set.","repeated":[{"type":"fieldID","name":"fieldID","doc":"Field to set."}]}],"replies":[],"errors":["INVALID_CLASS","CLASS_NOT_PREPARED","INVALID_OBJECT","INVALID_FIELDID","VM_DEAD"]},{"name":"InvokeMethod","id":3,"outputs":[{"type":"classID","name":"clazz","doc":"The class type ID."},{"type":"threadID","name":"thread","doc":"The thread in which to invoke."},{"type":"methodID","name":"methodID","doc":"The method to invoke."},{"type":"int","name":"arguments","doc":"","repeated":[{"type":"value","name":"arg","doc":"The argument value."}]},{"type":"int","name":"options","doc":"Invocation "}],"replies":[{"type":"value","name":"returnValue","doc":"The returned value."},{"type":"tagged-objectID","name":"exception","doc":"The thrown exception."}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","INVALID_THREAD","THREAD_NOT_SUSPENDED","VM_DEAD"]},{"name":"NewInstance","id":4,"outputs":[{"type":"classID","name":"clazz","doc":"The class type ID."},{"type":"threadID","name":"thread","doc":"The thread in which to invoke the constructor."},{"type":"methodID","name":"methodID","doc":"The constructor to invoke."},{"type":"int","name":"arguments","doc":"","repeated":[{"type":"value","name":"arg","doc":"The argument value."}]},{"type":"int","name":"options","doc":"Constructor invocation "}],"replies":[{"type":"tagged-objectID","name":"newObject","doc":"The newly created object, or null if the constructor threw an exception."},{"type":"tagged-objectID","name":"exception","doc":"The thrown exception, if any; otherwise, null."}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","INVALID_OBJECT","INVALID_THREAD","THREAD_NOT_SUSPENDED","VM_DEAD"]}]},{"name":"ArrayType","id":4,"commands":[{"name":"NewInstance","id":1,"outputs":[{"type":"arrayTypeID","name":"arrType","doc":"The array type of the new instance."},{"type":"int","name":"length","doc":"The length of the array."}],"replies":[{"type":"tagged-objectID","name":"newArray","doc":"The newly created array object."}],"errors":["INVALID_ARRAY","INVALID_OBJECT","VM_DEAD"]}]},{"name":"InterfaceType","id":5,"commands":[{"name":"InvokeMethod","id":1,"outputs":[{"type":"interfaceID","name":"clazz","doc":"The interface type ID."},{"type":"threadID","name":"thread","doc":"The thread in which to invoke."},{"type":"methodID","name":"methodID","doc":"The method to invoke."},{"type":"int","name":"arguments","doc":"","repeated":[{"type":"value","name":"arg","doc":"The argument value."}]},{"type":"int","name":"options","doc":"Invocation "}],"replies":[{"type":"value","name":"returnValue","doc":"The returned value."},{"type":"tagged-objectID","name":"exception","doc":"The thrown exception."}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","INVALID_THREAD","THREAD_NOT_SUSPENDED","VM_DEAD"]}]},{"name":"Method","id":6,"commands":[{"name":"LineTable","id":1,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The class."},{"type":"methodID","name":"methodID","doc":"The method."}],"replies":[{"type":"long","name":"start","doc":"Lowest valid code index for the method, >=0, or -1 if the method is native"},{"type":"long","name":"end","doc":"Highest valid code index for the method, >=0, or -1 if the method is native"},{"type":"int","name":"lines","doc":"The number of entries in the line table for this method.","repeated":[{"type":"long","name":"lineCodeIndex","doc":"Initial code index of the line, start <= lineCodeIndex < end"},{"type":"int","name":"lineNumber","doc":"Line number."}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","VM_DEAD"]},{"name":"VariableTable","id":2,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The class."},{"type":"methodID","name":"methodID","doc":"The method."}],"replies":[{"type":"int","name":"argCnt","doc":"The number of words in the frame used by arguments. Eight-byte arguments use two words; all others use one."},{"type":"int","name":"slots","doc":"The number of variables.","repeated":[{"type":"long","name":"codeIndex","doc":"First code index at which the variable is visible (unsigned). Used in conjunction with <code>length</code>. The variable can be get or set only when the current <code>codeIndex</code> <= current frame code index < <code>codeIndex + length</code>"},{"type":"string","name":"name","doc":"The variable's name."},{"type":"string","name":"signature","doc":"The variable type's JNI signature."},{"type":"int","name":"length","doc":"Unsigned value used in conjunction with <code>codeIndex</code>. The variable can be get or set only when the current <code>codeIndex</code> <= current frame code index < <code>code index + length</code>"},{"type":"int","name":"slot","doc":"The local variable's index in its frame"}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","ABSENT_INFORMATION","VM_DEAD"]},{"name":"Bytecodes","id":3,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The class."},{"type":"methodID","name":"methodID","doc":"The method."}],"replies":[{"type":"int","name":"bytes","doc":"","repeated":[{"type":"byte","name":"bytecode","doc":"A Java bytecode."}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"IsObsolete","id":4,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The class."},{"type":"methodID","name":"methodID","doc":"The method."}],"replies":[{"type":"boolean","name":"isObsolete","doc":"true if this method has been replacedby a non-equivalent method usingthe RedefineClasses command."}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"VariableTableWithGeneric","id":5,"outputs":[{"type":"referenceTypeID","name":"refType","doc":"The class."},{"type":"methodID","name":"methodID","doc":"The method."}],"replies":[{"type":"int","name":"argCnt","doc":"The number of words in the frame used by arguments. Eight-byte arguments use two words; all others use one."},{"type":"int","name":"slots","doc":"The number of variables.","repeated":[{"type":"long","name":"codeIndex","doc":"First code index at which the variable is visible (unsigned). Used in conjunction with <code>length</code>. The variable can be get or set only when the current <code>codeIndex</code> <= current frame code index < <code>codeIndex + length</code>"},{"type":"string","name":"name","doc":"The variable's name."},{"type":"string","name":"signature","doc":"The variable type's JNI signature."},{"type":"string","name":"genericSignature","doc":"The variable type's generic signature or an empty string if there is none."},{"type":"int","name":"length","doc":"Unsigned value used in conjunction with <code>codeIndex</code>. The variable can be get or set only when the current <code>codeIndex</code> <= current frame code index < <code>code index + length</code>"},{"type":"int","name":"slot","doc":"The local variable's index in its frame"}]}],"errors":["INVALID_CLASS","INVALID_OBJECT","INVALID_METHODID","ABSENT_INFORMATION","VM_DEAD"]}]},{"name":"Field","id":8,"commands":[]},{"name":"ObjectReference","id":9,"commands":[{"name":"ReferenceType","id":1,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"}],"replies":[{"type":"byte","name":"refTypeTag","doc":" of following reference type."},{"type":"referenceTypeID","name":"typeID","doc":"The runtime reference type."}],"errors":["INVALID_OBJECT","VM_DEAD"]},{"name":"GetValues","id":2,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"},{"type":"int","name":"fields","doc":"The number of values to get","repeated":[{"type":"fieldID","name":"fieldID","doc":"Field to get."}]}],"replies":[{"type":"int","name":"values","doc":"The number of values returned, always equal to 'fields', the number of values to get. Field values are ordered in the reply in the same order as corresponding fieldIDs in the command.","repeated":[{"type":"value","name":"value","doc":"The field value"}]}],"errors":["INVALID_OBJECT","INVALID_FIELDID","VM_DEAD"]},{"name":"SetValues","id":3,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"},{"type":"int","name":"values","doc":"The number of fields to set.","repeated":[{"type":"fieldID","name":"fieldID","doc":"Field to set."}]}],"replies":[],"errors":["INVALID_OBJECT","INVALID_FIELDID","VM_DEAD"]},{"name":"MonitorInfo","id":5,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"}],"replies":[{"type":"threadID","name":"owner","doc":"The monitor owner, or null if it is not currently owned."},{"type":"int","name":"entryCount","doc":"The number of times the monitor has been entered."},{"type":"int","name":"waiters","doc":"The number of threads that are waiting for the monitor 0 if there is no current owner","repeated":[{"type":"threadID","name":"thread","doc":"A thread waiting for this monitor."}]}],"errors":["INVALID_OBJECT","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"InvokeMethod","id":6,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"},{"type":"threadID","name":"thread","doc":"The thread in which to invoke."},{"type":"classID","name":"clazz","doc":"The class type."},{"type":"methodID","name":"methodID","doc":"The method to invoke."},{"type":"int","name":"arguments","doc":"The number of arguments.","repeated":[{"type":"value","name":"arg","doc":"The argument value."}]},{"type":"int","name":"options","doc":"Invocation "}],"replies":[{"type":"value","name":"returnValue","doc":"The returned value, or null if an exception is thrown."},{"type":"tagged-objectID","name":"exception","doc":"The thrown exception, if any."}],"errors":["INVALID_OBJECT","INVALID_CLASS","INVALID_METHODID","INVALID_THREAD","THREAD_NOT_SUSPENDED","VM_DEAD"]},{"name":"DisableCollection","id":7,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"}],"replies":[],"errors":["INVALID_OBJECT","VM_DEAD"]},{"name":"EnableCollection","id":8,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"}],"replies":[],"errors":["VM_DEAD"]},{"name":"IsCollected","id":9,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"}],"replies":[{"type":"boolean","name":"isCollected","doc":"true if the object has been collected; false otherwise"}],"errors":["INVALID_OBJECT","VM_DEAD"]},{"name":"ReferringObjects","id":10,"outputs":[{"type":"objectID","name":"object","doc":"The object ID"},{"type":"int","name":"maxReferrers","doc":"Maximum number of referring objects to return. Must be non-negative. If zero, all referring objects are returned."}],"replies":[{"type":"int","name":"referringObjects","doc":"The number of objects that follow.","repeated":[{"type":"tagged-objectID","name":"instance","doc":"An object that references this object."}]}],"errors":["INVALID_OBJECT","ILLEGAL_ARGUMENT","NOT_IMPLEMENTED","VM_DEAD"]}]},{"name":"StringReference","id":10,"commands":[{"name":"Value","id":1,"outputs":[{"type":"objectID","name":"stringObject","doc":"The String object ID."}],"replies":[{"type":"string","name":"stringValue","doc":"UTF-8 representation of the string value."}],"errors":["INVALID_STRING","INVALID_OBJECT","VM_DEAD"]}]},{"name":"ThreadReference","id":11,"commands":[{"name":"Name","id":1,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"string","name":"threadName","doc":"The thread name."}],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"Suspend","id":2,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"Resume","id":3,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"Status","id":4,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"int","name":"threadStatus","doc":"One of the thread status codes See "},{"type":"int","name":"suspendStatus","doc":"One of the suspend status codes See "}],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"ThreadGroup","id":5,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"threadGroupID","name":"group","doc":"The thread group of this thread."}],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"Frames","id":6,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."},{"type":"int","name":"startFrame","doc":"The index of the first frame to retrieve."},{"type":"int","name":"length","doc":"The count of frames to retrieve (-1 means all remaining)."}],"replies":[{"type":"int","name":"frames","doc":"The number of frames retreived","repeated":[{"type":"frameID","name":"frameID","doc":"The ID of this frame."},{"type":"location","name":"location","doc":"The current location of this frame"}]}],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"FrameCount","id":7,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"int","name":"frameCount","doc":"The count of frames on this thread's stack."}],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"OwnedMonitors","id":8,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"int","name":"owned","doc":"The number of owned monitors","repeated":[{"type":"tagged-objectID","name":"monitor","doc":"An owned monitor"}]}],"errors":["INVALID_THREAD","INVALID_OBJECT","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"CurrentContendedMonitor","id":9,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"tagged-objectID","name":"monitor","doc":"The contended monitor, or null if there is no current contended monitor."}],"errors":["INVALID_THREAD","INVALID_OBJECT","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"Stop","id":10,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."},{"type":"objectID","name":"throwable","doc":"Asynchronous exception. This object must be an instance of java.lang.Throwable or a subclass"}],"replies":[],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"Interrupt","id":11,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"SuspendCount","id":12,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"int","name":"suspendCount","doc":"The number of outstanding suspends of this thread."}],"errors":["INVALID_THREAD","INVALID_OBJECT","VM_DEAD"]},{"name":"OwnedMonitorsStackDepthInfo","id":13,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."}],"replies":[{"type":"int","name":"owned","doc":"The number of owned monitors","repeated":[{"type":"tagged-objectID","name":"monitor","doc":"An owned monitor"},{"type":"int","name":"stack_depth","doc":"Stack depth location where monitor was acquired"}]}],"errors":["INVALID_THREAD","INVALID_OBJECT","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"ForceEarlyReturn","id":14,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."},{"type":"value","name":"value","doc":"The value to return."}],"replies":[],"errors":["INVALID_THREAD","INVALID_OBJECT","THREAD_NOT_SUSPENDED","THREAD_NOT_ALIVE","OPAQUE_FRAME","NO_MORE_FRAMES","NOT_IMPLEMENTED","TYPE_MISMATCH","VM_DEAD"]}]},{"name":"ThreadGroupReference","id":12,"commands":[{"name":"Name","id":1,"outputs":[{"type":"threadGroupID","name":"group","doc":"The thread group object ID."}],"replies":[{"type":"string","name":"groupName","doc":"The thread group's name."}],"errors":["INVALID_THREAD_GROUP","INVALID_OBJECT","VM_DEAD"]},{"name":"Parent","id":2,"outputs":[{"type":"threadGroupID","name":"group","doc":"The thread group object ID."}],"replies":[{"type":"threadGroupID","name":"parentGroup","doc":"The parent thread group object, or null if the given thread group is a top-level thread group"}],"errors":["INVALID_THREAD_GROUP","INVALID_OBJECT","VM_DEAD"]},{"name":"Children","id":3,"outputs":[{"type":"threadGroupID","name":"group","doc":"The thread group object ID."}],"replies":[{"type":"int","name":"childThreads","doc":"The number of live child threads.","repeated":[{"type":"threadID","name":"childThread","doc":"A direct child thread ID."}]},{"type":"int","name":"childGroups","doc":"The number of active child thread groups.","repeated":[{"type":"threadGroupID","name":"childGroup","doc":"A direct child thread group ID."}]}],"errors":["INVALID_THREAD_GROUP","INVALID_OBJECT","VM_DEAD"]}]},{"name":"ArrayReference","id":13,"commands":[{"name":"Length","id":1,"outputs":[{"type":"arrayID","name":"arrayObject","doc":"The array object ID."}],"replies":[{"type":"int","name":"arrayLength","doc":"The length of the array."}],"errors":["INVALID_OBJECT","INVALID_ARRAY","VM_DEAD"]},{"name":"GetValues","id":2,"outputs":[{"type":"arrayID","name":"arrayObject","doc":"The array object ID."},{"type":"int","name":"firstIndex","doc":"The first index to retrieve."},{"type":"int","name":"length","doc":"The number of components to retrieve."}],"replies":[{"type":"arrayregion","name":"values","doc":"The retrieved values. If the values are objects, they are tagged-values; otherwise, they are untagged-values"}],"errors":["INVALID_LENGTH","INVALID_OBJECT","INVALID_ARRAY","VM_DEAD"]},{"name":"SetValues","id":3,"outputs":[{"type":"arrayID","name":"arrayObject","doc":"The array object ID."},{"type":"int","name":"firstIndex","doc":"The first index to set."},{"type":"int","name":"values","doc":"The number of values to set.","repeated":[]}],"replies":[],"errors":["INVALID_LENGTH","INVALID_OBJECT","INVALID_ARRAY","VM_DEAD"]}]},{"name":"ClassLoaderReference","id":14,"commands":[{"name":"VisibleClasses","id":1,"outputs":[{"type":"classLoaderID","name":"classLoaderObject","doc":"The class loader object ID."}],"replies":[{"type":"int","name":"classes","doc":"The number of visible classes.","repeated":[{"type":"byte","name":"refTypeTag","doc":" of following reference type."},{"type":"referenceTypeID","name":"typeID","doc":"A class visible to this class loader."}]}],"errors":["INVALID_OBJECT","INVALID_CLASS_LOADER","VM_DEAD"]}]},{"name":"EventRequest","id":15,"commands":[{"name":"Set","id":1,"outputs":[{"type":"byte","name":"eventKind","doc":"Event kind to request. See  for a complete list of events that can be requested; some events may require a capability in order to be requested."},{"type":"byte","name":"suspendPolicy","doc":"What threads are suspended when this event occurs? Note that the order of events and command replies accurately reflects the order in which threads are suspended and resumed. For example, if a  is processed before an event occurs which suspends the VM, the reply to the resume command will be written to the transport before the suspending event."},{"type":"int","name":"modifiers","doc":"Constraints used to control the number of generated events.Modifiers specify additional tests that an event must satisfy before it is placed in the event queue. Events are filtered by applying each modifier to an event in the order they are specified in this collection Only events that satisfy all modifiers are reported. A value of 0 means there are no modifiers in the request.<p>Filtering can improve debugger performance dramatically byreducing the amount of event traffic sent from the target VM to the debugger VM.","repeated":[{"type":"byte","name":"modKind","doc":"Modifier kind","cases":[{"name":"Count","target":"modKind","value":"1","union":[{"type":"int","name":"count","doc":"Count before event. One for one-off."}]},{"name":"Conditional","target":"modKind","value":"2","union":[{"type":"int","name":"exprID","doc":"For the future"}]},{"name":"ThreadOnly","target":"modKind","value":"3","union":[{"type":"threadID","name":"thread","doc":"Required thread"}]},{"name":"ClassOnly","target":"modKind","value":"4","union":[{"type":"referenceTypeID","name":"clazz","doc":"Required class"}]},{"name":"ClassMatch","target":"modKind","value":"5","union":[{"type":"string","name":"classPattern","doc":"Required class pattern. Matches are limited to exact matches of the given class pattern and matches of patterns that begin or end with '*'; for example, \"*.Foo\" or \"java.*\"."}]},{"name":"ClassExclude","target":"modKind","value":"6","union":[{"type":"string","name":"classPattern","doc":"Disallowed class pattern. Matches are limited to exact matches of the given class pattern and matches of patterns that begin or end with '*'; for example, \"*.Foo\" or \"java.*\"."}]},{"name":"LocationOnly","target":"modKind","value":"7","union":[{"type":"location","name":"loc","doc":"Required location"}]},{"name":"ExceptionOnly","target":"modKind","value":"8","union":[{"type":"referenceTypeID","name":"exceptionOrNull","doc":"Exception to report. Null (0) means report exceptions of all types. A non-null type restricts the reported exception events to exceptions of the given type or any of its subtypes."},{"type":"boolean","name":"caught","doc":"Report caught exceptions"},{"type":"boolean","name":"uncaught","doc":"Report uncaught exceptions. Note that it is not always possible to determine whether an exception is caught or uncaught at the time it is thrown. See the exception event catch location under  for more information."}]},{"name":"FieldOnly","target":"modKind","value":"9","union":[{"type":"referenceTypeID","name":"declaring","doc":"Type in which field is declared."},{"type":"fieldID","name":"fieldID","doc":"Required field"}]},{"name":"Step","target":"modKind","value":"10","union":[{"type":"threadID","name":"thread","doc":"Thread in which to step"},{"type":"int","name":"size","doc":"size of each step. See "},{"type":"int","name":"depth","doc":"relative call stack limit. See "}]},{"name":"InstanceOnly","target":"modKind","value":"11","union":[{"type":"objectID","name":"instance","doc":"Required 'this' object"}]},{"name":"SourceNameMatch","target":"modKind","value":"12","union":[{"type":"string","name":"sourceNamePattern","doc":"Required source name pattern. Matches are limited to exact matches of the given pattern and matches of patterns that begin or end with '*'; for example, \"*.Foo\" or \"java.*\"."}]}]}]}],"replies":[{"type":"int","name":"requestID","doc":"ID of created request"}],"errors":["INVALID_THREAD","INVALID_CLASS","INVALID_STRING","INVALID_OBJECT","INVALID_COUNT","INVALID_FIELDID","INVALID_METHODID","INVALID_LOCATION","INVALID_EVENT_TYPE","NOT_IMPLEMENTED","VM_DEAD"]},{"name":"Clear","id":2,"outputs":[{"type":"byte","name":"eventKind","doc":"Event kind to clear"},{"type":"int","name":"requestID","doc":"ID of request to clear"}],"replies":[],"errors":["VM_DEAD","INVALID_EVENT_TYPE"]},{"name":"ClearAllBreakpoints","id":3,"outputs":[],"replies":[],"errors":["VM_DEAD"]}]},{"name":"StackFrame","id":16,"commands":[{"name":"GetValues","id":1,"outputs":[{"type":"threadID","name":"thread","doc":"The frame's thread."},{"type":"frameID","name":"frame","doc":"The frame ID."},{"type":"int","name":"slots","doc":"The number of values to get.","repeated":[{"type":"int","name":"slot","doc":"The local variable's index in the frame."},{"type":"byte","name":"sigbyte","doc":"A  identifying the type of the variable"}]}],"replies":[{"type":"int","name":"values","doc":"The number of values retrieved, always equal to slots, the number of values to get.","repeated":[{"type":"value","name":"slotValue","doc":"The value of the local variable."}]}],"errors":["INVALID_THREAD","INVALID_OBJECT","INVALID_FRAMEID","INVALID_SLOT","VM_DEAD"]},{"name":"SetValues","id":2,"outputs":[{"type":"threadID","name":"thread","doc":"The frame's thread."},{"type":"frameID","name":"frame","doc":"The frame ID."},{"type":"int","name":"slotValues","doc":"The number of values to set.","repeated":[{"type":"int","name":"slot","doc":"The slot ID."},{"type":"value","name":"slotValue","doc":"The value to set."}]}],"replies":[],"errors":["INVALID_THREAD","INVALID_OBJECT","INVALID_FRAMEID","VM_DEAD"]},{"name":"ThisObject","id":3,"outputs":[{"type":"threadID","name":"thread","doc":"The frame's thread."},{"type":"frameID","name":"frame","doc":"The frame ID."}],"replies":[{"type":"tagged-objectID","name":"objectThis","doc":"The 'this' object for this frame."}],"errors":["INVALID_THREAD","INVALID_OBJECT","INVALID_FRAMEID","VM_DEAD"]},{"name":"PopFrames","id":4,"outputs":[{"type":"threadID","name":"thread","doc":"The thread object ID."},{"type":"frameID","name":"frame","doc":"The frame ID."}],"replies":[],"errors":["INVALID_THREAD","INVALID_OBJECT","INVALID_FRAMEID","THREAD_NOT_SUSPENDED","NO_MORE_FRAMES","INVALID_FRAMEID","NOT_IMPLEMENTED","VM_DEAD"]}]},{"name":"ClassObjectReference","id":17,"commands":[{"name":"ReflectedType","id":1,"outputs":[{"type":"classObjectID","name":"classObject","doc":"The class object."}],"replies":[{"type":"byte","name":"refTypeTag","doc":" of following reference type."},{"type":"referenceTypeID","name":"typeID","doc":"reflected reference type"}],"errors":["INVALID_OBJECT","VM_DEAD"]}]},{"name":"Event","id":64,"commands":[{"name":"Composite","id":100,"outputs":[],"replies":[],"errors":[],"events":[{"type":"byte","name":"suspendPolicy","doc":"Which threads where suspended by this composite event?"},{"type":"int","name":"events","doc":"Events in set.","repeated":[{"type":"byte","name":"eventKind","doc":"Event kind selector","cases":[{"name":"VMStart","target":"eventKind","value":"JDWP.EventKind.VM_START","union":[{"type":"int","name":"requestID","doc":"Request that generated event (or 0 if this event is automatically generated."},{"type":"threadID","name":"thread","doc":"Initial thread"}]},{"name":"SingleStep","target":"eventKind","value":"JDWP.EventKind.SINGLE_STEP","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Stepped thread"},{"type":"location","name":"location","doc":"Location stepped to"}]},{"name":"Breakpoint","target":"eventKind","value":"JDWP.EventKind.BREAKPOINT","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which hit breakpoint"},{"type":"location","name":"location","doc":"Location hit"}]},{"name":"MethodEntry","target":"eventKind","value":"JDWP.EventKind.METHOD_ENTRY","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which entered method"},{"type":"location","name":"location","doc":"The initial executable location in the method."}]},{"name":"MethodExit","target":"eventKind","value":"JDWP.EventKind.METHOD_EXIT","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which exited method"},{"type":"location","name":"location","doc":"Location of exit"}]},{"name":"MethodExitWithReturnValue","target":"eventKind","value":"JDWP.EventKind.METHOD_EXIT_WITH_RETURN_VALUE","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which exited method"},{"type":"location","name":"location","doc":"Location of exit"},{"type":"value","name":"value","doc":"Value that will be returned by the method"}]},{"name":"MonitorContendedEnter","target":"eventKind","value":"JDWP.EventKind.MONITOR_CONTENDED_ENTER","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which is trying to enter the monitor"},{"type":"tagged-objectID","name":"object","doc":"Monitor object reference"},{"type":"location","name":"location","doc":"Location of contended monitor enter"}]},{"name":"MonitorContendedEntered","target":"eventKind","value":"JDWP.EventKind.MONITOR_CONTENDED_ENTERED","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which entered monitor"},{"type":"tagged-objectID","name":"object","doc":"Monitor object reference"},{"type":"location","name":"location","doc":"Location of contended monitor enter"}]},{"name":"MonitorWait","target":"eventKind","value":"JDWP.EventKind.MONITOR_WAIT","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which is about to wait"},{"type":"tagged-objectID","name":"object","doc":"Monitor object reference"},{"type":"location","name":"location","doc":"Location at which the wait will occur"},{"type":"long","name":"timeout","doc":"Thread wait time in milliseconds"}]},{"name":"MonitorWaited","target":"eventKind","value":"JDWP.EventKind.MONITOR_WAITED","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread which waited"},{"type":"tagged-objectID","name":"object","doc":"Monitor object reference"},{"type":"location","name":"location","doc":"Location at which the wait occured"},{"type":"boolean","name":"timed_out","doc":"True if timed out"}]},{"name":"Exception","target":"eventKind","value":"JDWP.EventKind.EXCEPTION","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Thread with exception"},{"type":"location","name":"location","doc":"Location of exception throw (or first non-native location after throw if thrown from a native method)"},{"type":"tagged-objectID","name":"exception","doc":"Thrown exception"},{"type":"location","name":"catchLocation","doc":"Location of catch, or 0 if not caught. An exception is considered to be caught if, at the point of the throw, the current location is dynamically enclosed in a try statement that handles the exception. (See the JVM specification for details). If there is such a try statement, the catch location is the first location in the appropriate catch clause. <p>If there are native methods in the call stack at the time of the exception, there are important restrictions to note about the returned catch location. In such cases, it is not possible to predict whether an exception will be handled by some native method on the call stack. Thus, it is possible that exceptions considered uncaught here will, in fact, be handled by a native method and not cause termination of the target VM. Furthermore, it cannot be assumed that the catch location returned here will ever be reached by the throwing thread. If there is a native frame between the current location and the catch location, the exception might be handled and cleared in that native method instead. <p>Note that compilers can generate try-catch blocks in some cases where they are not explicit in the source code; for example, the code generated for <code>synchronized</code> and <code>finally</code> blocks can contain implicit try-catch blocks. If such an implicitly generated try-catch is present on the call stack at the time of the throw, the exception will be considered caught even though it appears to be uncaught from examination of the source code."}]},{"name":"ThreadStart","target":"eventKind","value":"JDWP.EventKind.THREAD_START","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Started thread"}]},{"name":"ThreadDeath","target":"eventKind","value":"JDWP.EventKind.THREAD_DEATH","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Ending thread"}]},{"name":"ClassPrepare","target":"eventKind","value":"JDWP.EventKind.CLASS_PREPARE","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Preparing thread. In rare cases, this event may occur in a debugger system thread within the target VM. Debugger threads take precautions to prevent these events, but they cannot be avoided under some conditions, especially for some subclasses of java.lang.Error. If the event was generated by a debugger system thread, the value returned by this method is null, and if the requested   for the event was EVENT_THREAD all threads will be suspended instead, and the composite event's suspend policy will reflect this change. <p>Note that the discussion above does not apply to system threads created by the target VM during its normal (non-debug) operation."},{"type":"byte","name":"refTypeTag","doc":"Kind of reference type. See "},{"type":"referenceTypeID","name":"typeID","doc":"Type being prepared"},{"type":"string","name":"signature","doc":"Type signature"},{"type":"int","name":"status","doc":"Status of type. See "}]},{"name":"ClassUnload","target":"eventKind","value":"JDWP.EventKind.CLASS_UNLOAD","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"string","name":"signature","doc":"Type signature"}]},{"name":"FieldAccess","target":"eventKind","value":"JDWP.EventKind.FIELD_ACCESS","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Accessing thread"},{"type":"location","name":"location","doc":"Location of access"},{"type":"byte","name":"refTypeTag","doc":"Kind of reference type. See "},{"type":"referenceTypeID","name":"typeID","doc":"Type of field"},{"type":"fieldID","name":"fieldID","doc":"Field being accessed"},{"type":"tagged-objectID","name":"object","doc":"Object being accessed (null=0 for statics"}]},{"name":"FieldModification","target":"eventKind","value":"JDWP.EventKind.FIELD_MODIFICATION","union":[{"type":"int","name":"requestID","doc":"Request that generated event"},{"type":"threadID","name":"thread","doc":"Modifying thread"},{"type":"location","name":"location","doc":"Location of modify"},{"type":"byte","name":"refTypeTag","doc":"Kind of reference type. See "},{"type":"referenceTypeID","name":"typeID","doc":"Type of field"},{"type":"fieldID","name":"fieldID","doc":"Field being modified"},{"type":"tagged-objectID","name":"object","doc":"Object being modified (null=0 for statics"},{"type":"value","name":"valueToBe","doc":"Value to be assigned"}]},{"name":"VMDeath","target":"eventKind","value":"JDWP.EventKind.VM_DEATH","union":[{"type":"int","name":"requestID","doc":"Request that generated event"}]}]}]}]}]}],"constant_sets":[{"name":"Error","constants":[{"name":"NONE","id":0,"doc":"No error has occurred."},{"name":"INVALID_THREAD","id":10,"doc":"Passed thread is null, is not a valid thread or has exited."},{"name":"INVALID_THREAD_GROUP","id":11,"doc":"Thread group invalid."},{"name":"INVALID_PRIORITY","id":12,"doc":"Invalid priority."},{"name":"THREAD_NOT_SUSPENDED","id":13,"doc":"If the specified thread has not been suspended by an event."},{"name":"THREAD_SUSPENDED","id":14,"doc":"Thread already suspended."},{"name":"THREAD_NOT_ALIVE","id":15,"doc":"Thread has not been started or is now dead."},{"name":"INVALID_OBJECT","id":20,"doc":"If this reference type has been unloaded and garbage collected."},{"name":"INVALID_CLASS","id":21,"doc":"Invalid class."},{"name":"CLASS_NOT_PREPARED","id":22,"doc":"Class has been loaded but not yet prepared."},{"name":"INVALID_METHODID","id":23,"doc":"Invalid method."},{"name":"INVALID_LOCATION","id":24,"doc":"Invalid location."},{"name":"INVALID_FIELDID","id":25,"doc":"Invalid field."},{"name":"INVALID_FRAMEID","id":30,"doc":"Invalid jframeID."},{"name":"NO_MORE_FRAMES","id":31,"doc":"There are no more Java or JNI frames on the call stack."},{"name":"OPAQUE_FRAME","id":32,"doc":"Information about the frame is not available."},{"name":"NOT_CURRENT_FRAME","id":33,"doc":"Operation can only be performed on current frame."},{"name":"TYPE_MISMATCH","id":34,"doc":"The variable is not an appropriate type for the function used."},{"name":"INVALID_SLOT","id":35,"doc":"Invalid slot."},{"name":"DUPLICATE","id":40,"doc":"Item already set."},{"name":"NOT_FOUND","id":41,"doc":"Desired element not found."},{"name":"INVALID_MONITOR","id":50,"doc":"Invalid monitor."},{"name":"NOT_MONITOR_OWNER","id":51,"doc":"This thread doesn't own the monitor."},{"name":"INTERRUPT","id":52,"doc":"The call has been interrupted before completion."},{"name":"INVALID_CLASS_FORMAT","id":60,"doc":"The virtual machine attempted to read a class file and determined that the file is malformed or otherwise cannot be interpreted as a class file."},{"name":"CIRCULAR_CLASS_DEFINITION","id":61,"doc":"A circularity has been detected while initializing a class."},{"name":"FAILS_VERIFICATION","id":62,"doc":"The verifier detected that a class file, though well formed, contained some sort of internal inconsistency or security problem."},{"name":"ADD_METHOD_NOT_IMPLEMENTED","id":63,"doc":"Adding methods has not been implemented."},{"name":"SCHEMA_CHANGE_NOT_IMPLEMENTED","id":64,"doc":"Schema change has not been implemented."},{"name":"INVALID_TYPESTATE","id":65,"doc":"The state of the thread has been modified, and is now inconsistent."},{"name":"HIERARCHY_CHANGE_NOT_IMPLEMENTED","id":66,"doc":"A direct superclass is different for the new class version, or the set of directly implemented interfaces is different and canUnrestrictedlyRedefineClasses is false."},{"name":"DELETE_METHOD_NOT_IMPLEMENTED","id":67,"doc":"The new class version does not declare a method declared in the old class version and canUnrestrictedlyRedefineClasses is false."},{"name":"UNSUPPORTED_VERSION","id":68,"doc":"A class file has a version number not supported by this VM."},{"name":"NAMES_DONT_MATCH","id":69,"doc":"The class name defined in the new class file is different from the name in the old class object."},{"name":"CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED","id":70,"doc":"The new class version has different modifiers and and canUnrestrictedlyRedefineClasses is false."},{"name":"METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED","id":71,"doc":"A method in the new class version has different modifiers than its counterpart in the old class version and and canUnrestrictedlyRedefineClasses is false."},{"name":"NOT_IMPLEMENTED","id":99,"doc":"The functionality is not implemented in this virtual machine."},{"name":"NULL_POINTER","id":100,"doc":"Invalid pointer."},{"name":"ABSENT_INFORMATION","id":101,"doc":"Desired information is not available."},{"name":"INVALID_EVENT_TYPE","id":102,"doc":"The specified event type id is not recognized."},{"name":"ILLEGAL_ARGUMENT","id":103,"doc":"Illegal argument."},{"name":"OUT_OF_MEMORY","id":110,"doc":"The function needed to allocate memory and no more memory was available for allocation."},{"name":"ACCESS_DENIED","id":111,"doc":"Debugging has not been enabled in this virtual machine. JVMTI cannot be used."},{"name":"VM_DEAD","id":112,"doc":"The virtual machine is not running."},{"name":"INTERNAL","id":113,"doc":"An unexpected internal error has occurred."},{"name":"UNATTACHED_THREAD","id":115,"doc":"The thread being used to call this function is not attached to the virtual machine. Calls must be made from attached threads."},{"name":"INVALID_TAG","id":500,"doc":"object type id or class tag."},{"name":"ALREADY_INVOKING","id":502,"doc":"Previous invoke not complete."},{"name":"INVALID_INDEX","id":503,"doc":"Index is invalid."},{"name":"INVALID_LENGTH","id":504,"doc":"The length is invalid."},{"name":"INVALID_STRING","id":506,"doc":"The string is invalid."},{"name":"INVALID_CLASS_LOADER","id":507,"doc":"The class loader is invalid."},{"name":"INVALID_ARRAY","id":508,"doc":"The array is invalid."},{"name":"TRANSPORT_LOAD","id":509,"doc":"Unable to load the transport."},{"name":"TRANSPORT_INIT","id":510,"doc":"Unable to initialize the transport."},{"name":"NATIVE_METHOD","id":511,"doc":""},{"name":"INVALID_COUNT","id":512,"doc":"The count is invalid."}]},{"name":"EventKind","constants":[{"name":"SINGLE_STEP","id":1,"doc":""},{"name":"BREAKPOINT","id":2,"doc":""},{"name":"FRAME_POP","id":3,"doc":""},{"name":"EXCEPTION","id":4,"doc":""},{"name":"USER_DEFINED","id":5,"doc":""},{"name":"THREAD_START","id":6,"doc":""},{"name":"THREAD_DEATH","id":7,"doc":""},{"name":"THREAD_END","id":7,"doc":"obsolete - was used in jvmdi"},{"name":"CLASS_PREPARE","id":8,"doc":""},{"name":"CLASS_UNLOAD","id":9,"doc":""},{"name":"CLASS_LOAD","id":10,"doc":""},{"name":"FIELD_ACCESS","id":20,"doc":""},{"name":"FIELD_MODIFICATION","id":21,"doc":""},{"name":"EXCEPTION_CATCH","id":30,"doc":""},{"name":"METHOD_ENTRY","id":40,"doc":""},{"name":"METHOD_EXIT","id":41,"doc":""},{"name":"METHOD_EXIT_WITH_RETURN_VALUE","id":42,"doc":""},{"name":"MONITOR_CONTENDED_ENTER","id":43,"doc":""},{"name":"MONITOR_CONTENDED_ENTERED","id":44,"doc":""},{"name":"MONITOR_WAIT","id":45,"doc":""},{"name":"MONITOR_WAITED","id":46,"doc":""},{"name":"VM_START","id":90,"doc":""},{"name":"VM_INIT","id":90,"doc":"obsolete - was used in jvmdi"},{"name":"VM_DEATH","id":99,"doc":""},{"name":"VM_DISCONNECTED","id":100,"doc":"Never sent across JDWP"}]},{"name":"ThreadStatus","constants":[{"name":"ZOMBIE","id":0,"doc":""},{"name":"RUNNING","id":1,"doc":""},{"name":"SLEEPING","id":2,"doc":""},{"name":"MONITOR","id":3,"doc":""},{"name":"WAIT","id":4,"doc":""}]},{"name":"SuspendStatus","constants":[{"name":"SUSPEND_STATUS_SUSPENDED","id":0,"doc":""}]},{"name":"ClassStatus","constants":[{"name":"VERIFIED","id":1,"doc":""},{"name":"PREPARED","id":2,"doc":""},{"name":"INITIALIZED","id":4,"doc":""},{"name":"ERROR","id":8,"doc":""}]},{"name":"TypeTag","constants":[{"name":"CLASS","id":1,"doc":"ReferenceType is a class."},{"name":"INTERFACE","id":2,"doc":"ReferenceType is an interface."},{"name":"ARRAY","id":3,"doc":"ReferenceType is an array."}]},{"name":"Tag","constants":[{"name":"ARRAY","id":91,"doc":"'[' - an array object (objectID size)."},{"name":"BYTE","id":66,"doc":"'B' - a byte value (1 byte)."},{"name":"CHAR","id":67,"doc":"'C' - a character value (2 bytes)."},{"name":"OBJECT","id":76,"doc":"'L' - an object (objectID size)."},{"name":"FLOAT","id":70,"doc":"'F' - a float value (4 bytes)."},{"name":"DOUBLE","id":68,"doc":"'D' - a double value (8 bytes)."},{"name":"INT","id":73,"doc":"'I' - an int value (4 bytes)."},{"name":"LONG","id":74,"doc":"'J' - a long value (8 bytes)."},{"name":"SHORT","id":83,"doc":"'S' - a short value (2 bytes)."},{"name":"VOID","id":86,"doc":"'V' - a void value (no bytes)."},{"name":"BOOLEAN","id":90,"doc":"'Z' - a boolean value (1 byte)."},{"name":"STRING","id":115,"doc":"'s' - a String object (objectID size)."},{"name":"THREAD","id":116,"doc":"'t' - a Thread object (objectID size)."},{"name":"THREAD_GROUP","id":103,"doc":"'g' - a ThreadGroup object (objectID size)."},{"name":"CLASS_LOADER","id":108,"doc":"'l' - a ClassLoader object (objectID size)."},{"name":"CLASS_OBJECT","id":99,"doc":"'c' - a class object object (objectID size)."}]},{"name":"StepDepth","constants":[{"name":"INTO","id":0,"doc":"Step into any method calls that occur before the end of the step."},{"name":"OVER","id":1,"doc":"Step over any method calls that occur before the end of the step."},{"name":"OUT","id":2,"doc":"Step out of the current method."}]},{"name":"StepSize","constants":[{"name":"MIN","id":0,"doc":"Step by the minimum possible amount (often a bytecode instruction)."},{"name":"LINE","id":1,"doc":"Step to the next source line unless there is no line number information in which case a MIN step is done instead."}]},{"name":"SuspendPolicy","constants":[{"name":"NONE","id":0,"doc":"Suspend no threads when this event is encountered."},{"name":"EVENT_THREAD","id":1,"doc":"Suspend the event thread when this event is encountered."},{"name":"ALL","id":2,"doc":"Suspend all threads when this event is encountered."}]},{"name":"InvokeOptions","constants":[{"name":"INVOKE_SINGLE_THREADED","id":0,"doc":"otherwise, all threads started."},{"name":"INVOKE_NONVIRTUAL","id":0,"doc":"otherwise, normal virtual invoke (instance methods only)"}]}]}
